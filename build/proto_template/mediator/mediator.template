import AbstractMediator from "@/core/abstract/AbstractMediator";
import { SuccessMessage } from "@/core/global/Constant";
import { IEventDispatcher } from "@/core/IEventDispatcher";
import { EventType, HttpType } from "@/views/${moduleName}/setting";
import { Message } from "element-ui";
import ${className}Proxy from "../proxy/${className}Proxy";

interface I${className} extends IEventDispatcher {
    
}

export default class ${className}Mediator extends AbstractMediator {
    private myProxy: ${className}Proxy = <any>this.getProxy(${className}Proxy);

    onRegister() {
        this.myProxy.enter();
    }

    onRemove() {
        this.myProxy.leave();
    }

    protected initViewData() {
        const myView: I${className} = this.viewComponent;
    }

    listNotificationInterests(): string[] {
        return [
${listNotificationInterests}
        ];
    }

    handleNotification(notification: puremvc.INotification) {
        const myProxy: ${className}Proxy = <any>this.facade.retrieveProxy(${className}Proxy.NAME);
        const myView: I${className} = this.viewComponent;
        const body = notification.getBody();
        switch (notification.getName()) {
            case EventType.${http_type_table_columns}:
                myProxy.setTableColumns(body);
                break;
            case EventType.${http_type_index}:
                myProxy.setTableData(body);
                break;
            case EventType.${http_type_show}:
                myProxy.setDetail(body);
                break;
            case EventType.${http_type_store}:
                Message.success(SuccessMessage.create);
                myProxy.hideDialog();
                myProxy.listQuery.page_count = 1;
                myProxy.onQuery();
                break;
            case EventType.${http_type_update}:
                Message.success(SuccessMessage.update);
                myProxy.hideDialog();
                myProxy.onQuery();
                break;
${handleNotification}
        }
    }
}
